// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, ${ship.id}_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    <!--! if FISH cargo is missing, trawlers need to still work -->
    <tal:trawlers condition="ship.str_type_info.lower()=='trawler'">
        FISH: return ${ship.scale_capacity(ship.capacity_fish_holds)};
        PASS: return ${ship.scale_capacity(ship.capacity_pax)};
    </tal:trawlers>
    return ${ship.scale_capacity(ship.default_cargo_capacity)};
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, ${ship.id}_create_visual_effect, ${ship.get_expression_for_effects()}) {
    return ${len(ship.effects)};
}

<tal:extra_part_cargo_fraction condition="ship.extra_part_cargo_fraction">
switch (FEAT_SHIPS, SELF, ${ship.id}_auxiliary_cargo_capacity, cargo_classes) {
    bitmask(CC_PASSENGERS): return ${ship.scale_extra_part_capacity(ship.capacity_pax)};
    bitmask(CC_MAIL): return ${ship.scale_extra_part_capacity(ship.capacity_mail)};
    return ${ship.scale_extra_part_capacity(ship.capacity_freight)};
}

item(FEAT_SHIPS, ${ship.id}_auxiliary, ${ship.numeric_id + 1}) {
    property {
        climates_available:             NO_CLIMATE;
        introduction_date:              date(0,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 ${ship.scale_extra_part_capacity(ship.default_cargo_capacity)};
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(${ship.refittable_classes});
        non_refittable_cargo_classes:   bitmask(${ship.non_refittable_classes}); // don't set non-refittable classes except in special cases, increases likelihood of breaking cargo support
        cargo_allow_refit:              [${ship.get_label_refits_allowed()}];
        cargo_disallow_refit:           [${ship.get_label_refits_disallowed()}];
        default_cargo_type:             ${ship.default_cargo};
        loading_speed:                  ${ship.loading_speed};
        cargo_age_period:               ${ship.cargo_age_period};
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
    }
    graphics {
        cargo_capacity:                 ${ship.id}_auxiliary_cargo_capacity;
    }
}
</tal:extra_part_cargo_fraction>

<tal:extra_parts condition="ship.extra_parts > 0">
switch (FEAT_SHIPS, SELF, ${ship.id}_articulated_part, extra_callback_info1) {
<tal:extra_part_cargo_fraction condition="ship.extra_part_cargo_fraction">
<tal:extra_part_cargo_fraction_extra_parts condition="ship.extra_parts > 1">
    1..${ship.extra_parts - 1}: ${ship.id};
</tal:extra_part_cargo_fraction_extra_parts>
    ${ship.extra_parts}: ${ship.id}_auxiliary;
</tal:extra_part_cargo_fraction>
<tal:not_extra_part_cargo_fraction condition="not ship.extra_part_cargo_fraction">
    1..${ship.extra_parts}: return ${ship.id};
</tal:not_extra_part_cargo_fraction>
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
</tal:extra_parts>

// -- props -- //
item(FEAT_SHIPS, ${ship.id}, ${ship.numeric_id}) {
    property {
        name:                           ${ship.get_name()};
        climates_available:             ALL_CLIMATES;
        sound_effect:                   ${('SOUND_DEPARTURE_CARGO_SHIP','SOUND_DEPARTURE_FERRY')[ship.default_cargo=='PASS']};
        effect_spawn_model:             ${ship.effect_spawn_model};
        introduction_date:              date(${ship.intro_date},01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 ${ship.scale_capacity(ship.default_cargo_capacity)};
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          ${ship.speed}mph;
        ocean_speed_fraction:           ${ship.ocean_speed};
        canal_speed_fraction:           ${ship.canal_speed};
        cost_factor:                    min(${ship.buy_cost} + param_ship_running_cost_modifier, 255);
        running_cost_factor:            min(${ship.running_cost} + param_ship_purchase_cost_modifier, 255);
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(${ship.refittable_classes});
        non_refittable_cargo_classes:   bitmask(${ship.non_refittable_classes}); // don't set non-refittable classes except in special cases, increases likelihood of breaking cargo support
        cargo_allow_refit:              [${ship.get_label_refits_allowed()}];
        cargo_disallow_refit:           [${ship.get_label_refits_disallowed()}];
        default_cargo_type:             ${ship.default_cargo};
        loading_speed:                  ${ship.loading_speed};
        cargo_age_period:               ${ship.cargo_age_period};
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     ${ship.adjusted_model_life};
        retire_early:                   ${ship.vehicle_life - 4}; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   ${ship.vehicle_life};
    }
    graphics {
        speed:                          ${ship.id}_switch_speed_varies_with_load_amount;
        purchase_speed:                 ${ship.id}_switch_purchase_speed;
        cargo_capacity:                 ${ship.id}_switch_cargo_capacity;
        purchase_cargo_capacity:        ${ship.id}_switch_purchase_cargo_capacity;
        additional_text:                ${ship.get_buy_menu_string()};
        cargo_subtype_text:             ${ship.id}_switch_cargo_subtype_text;
        default:                        ${ship.id}_switch_graphics;
        purchase:                       ${ship.id}_sg_purchase;
        create_effect:                  ${ship.id}_create_visual_effect;
<tal:extra_parts condition="ship.extra_parts > 0">
        articulated_part:               ${ship.id}_articulated_part;
</tal:extra_parts>
<tal:extra_parts condition="ship.refit_part_name">
        refit_part_name:                switch_refit_part_name_${ship.refit_part_name};
</tal:extra_parts>
    }
}

// -- end ${ship.title} -- <!--! another comment to aid reading the final nml  -->

