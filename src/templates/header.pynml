grf {
    grfid: "JG\83\58";
    name: string(STR_GRF_NAME);
    desc: string(STR_GRF_DESCRIPTION);
    url: string(STR_GRF_URL);
    version: ${repo_vars.repo_version};
    min_compatible_version: 1;
    param 0 {
        param_adjust_ship_speed {
            type:    int;
            name:    string(STR_PARAM_ADJUST_SHIP_SPEEDS);
            min_value: 0;
            max_value: 2;
            def_value: 1;
            names: {
                0: string(STR_PARAM_ADJUST_SHIP_SPEEDS_OPTION_0);
                1: string(STR_PARAM_ADJUST_SHIP_SPEEDS_OPTION_1);
                2: string(STR_PARAM_ADJUST_SHIP_SPEEDS_OPTION_2);
            };
        }
    }
    param 1 {
        param_ship_running_costs {
            type:    int;
            name:    string(STR_PARAM_ADJUST_SHIP_RUNNING_COSTS);
            min_value: 0;
            max_value: 2;
            def_value: 1;
            names: {
                0: string(STR_PARAM_ADJUST_COSTS_OPTION_0);
                1: string(STR_PARAM_ADJUST_COSTS_OPTION_1);
                2: string(STR_PARAM_ADJUST_COSTS_OPTION_2);
            };
        }
    }
    param 2 {
        param_ship_purchase_costs {
            type:    int;
            name:    string(STR_PARAM_ADJUST_SHIP_PURCHASE_COSTS);
            min_value: 0;
            max_value: 2;
            def_value: 1;
            names: {
                0: string(STR_PARAM_ADJUST_COSTS_OPTION_0);
                1: string(STR_PARAM_ADJUST_COSTS_OPTION_1);
                2: string(STR_PARAM_ADJUST_COSTS_OPTION_2);
            };
        }
    }
    param 3 {
        param_ship_capacity_multiplier {
            type:    int;
            name:    string(STR_PARAM_SHIP_CAPACITY_MULTIPLIER);
            min_value: 1;
            max_value: 20;
            def_value: 1;
        }
    }
    param 4 {
        param_ship_running_cost_modifier {
            type:    int;
            name:    string(STR_PARAM_SHIP_RUNNING_COST_MODIFIER);
            min_value: 0;
            max_value: 100;
            def_value: 0;
        }
    }
    param 5 {
        param_ship_purchase_cost_modifier {
            type:    int;
            name:    string(STR_PARAM_SHIP_PURCHASE_COST_MODIFIER);
            min_value: 0;
            max_value: 100;
            def_value: 0;
        }
    }
}

if (!extended_feature_test("multi_part_ships")) {
    error(FATAL, string(STR_UNSUPPORTED_VERSION));
}

basecost {
    PR_RUNNING_SHIP: param_ship_running_costs;
    PR_BUILD_VEHICLE_SHIP: 2 + param_ship_purchase_costs;
}

// sort order
sort(FEAT_SHIPS, ${[ship.numeric_id for ship in ships]});

switch (FEAT_SHIPS, SELF, switch_refit_part_name_fore_aft_holds, extra_callback_info1) {
    0: return string(STR_FORE_HOLD);
    1: return string(STR_AFT_HOLD);
}

switch (FEAT_SHIPS, SELF, switch_refit_part_name_fore_mid_aft_holds, extra_callback_info1) {
    0: return string(STR_FORE_HOLD);
    1: return string(STR_MID_HOLD);
    2: return string(STR_AFT_HOLD);
}

switch (FEAT_SHIPS, SELF, switch_refit_part_name_first_second_barges, extra_callback_info1) {
    0: return string(STR_FIRST_BARGE);
    1: return string(STR_SECOND_BARGE);
}

switch (FEAT_SHIPS, SELF, switch_refit_part_name_main_aux_decks, extra_callback_info1) {
    0: return string(STR_MAIN_DECK);
    1: return string(STR_AUXILIARY_DECK);
}

switch (FEAT_SHIPS, SELF, switch_refit_part_name_tanks, extra_callback_info1) {
    0: return string(STR_TANK_1);
    1: return string(STR_TANK_2);
    2: return string(STR_TANK_3);
    3: return string(STR_TANK_4);
}

switch (FEAT_SHIPS, SELF, switch_refit_part_name_sections, extra_callback_info1) {
    0: return string(STR_SECTION_1);
    1: return string(STR_SECTION_2);
    2: return string(STR_SECTION_3);
    3: return string(STR_SECTION_4);
}

switch (FEAT_SHIPS, SELF, switch_refit_part_name_decks, extra_callback_info1) {
    0: return string(STR_DECK_1);
    1: return string(STR_DECK_2);
    2: return string(STR_DECK_3);
    3: return string(STR_DECK_4);
}

<tal:cargo_parts repeat="i python:range(1, 4)">
    switch (FEAT_SHIPS, BACKWARD_ENGINE(${i}), get_ship_part_cargo_values_${i}, [
        STORE_TEMP(LOAD_TEMP(1) + cargo_count, 1),
        STORE_TEMP(LOAD_TEMP(2) + cargo_capacity, 2),
        STORE_TEMP(cargo_capacity, 0x100) // Temporary optimiser bug workaround
    ]) {
        return 0;
    }
</tal:cargo_parts>

switch (FEAT_SHIPS, SELF, get_ship_cargo_ratio_0, cargo_count*100/cargo_capacity) {
    return;
}

<tal:cargo_ratios repeat="i python:range(1, 4)">
    switch (FEAT_SHIPS, SELF, get_ship_cargo_ratio_${i}, [
        STORE_TEMP(cargo_count, 1),
        STORE_TEMP(cargo_capacity, 2),
        <tal:cargo_ratio_proc repeat="j python:range(1, i + 1)">
            get_ship_part_cargo_values_${j}(),
        </tal:cargo_ratio_proc>
        LOAD_TEMP(1)*100/LOAD_TEMP(2)
    ]) {
        return;
    }
</tal:cargo_ratios>
